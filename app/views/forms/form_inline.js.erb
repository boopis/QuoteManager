function postForm(form) {
  if (validate(form)) {
    var xhr = new XMLHttpRequest();
    var fData = new FormData(form)
      xhr.open('POST',form.action,true);
    xhr.onreadystatechange = function () {
      if (xhr.readyState == 4 && xhr.status == 201) {
        document.getElementById('qm-modal-inner').innerHTML = '<h2>Success!</h2>';
        setTimeout(function(){
          document.getElementById('qm-modal').remove();
        },2000)
      }
    };
    xhr.send(fData);
  }
}

function validate(form) {
  var a = form.getElementsByClassName('qm-required')
    var errors = 0;
  for (var ii=0; ii<a.length; ii++) {
    a[ii].classList.remove('qm-error');
    var group = 0;
    for (var i=0; i<a[ii].childNodes.length; i++) {
      var child = a[ii].childNodes[i];
      if (child.tagName == "INPUT") {
        if (child.type == "text" && child.value.length < 1 ) {
          a[ii].className = a[ii].className + " qm-error";
          errors ++;
        }
        if (child.type == 'file' && child.value == '') {
          a[ii].className = a[ii].className + " qm-error";
          errors ++;
        }
        if (child.type == 'inpage' && child.value.length < 1) {
          a[ii].className = a[ii].className + " qm-error";
          errors ++;
        }
        if (child.type == "email") {
          var re = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;          
            if (!re.test(child.value)) {          
              a[ii].className = a[ii].className + " qm-error";
              errors ++;
            }
        }
        if (child.type == "tel" && child.value.length < 1 ) {
          a[ii].className = a[ii].className + " qm-error";
          errors ++;
        }
        if (child.type == "checkbox") {
          if (child.checked) { group++ }
        }
        if (child.type == "radio") {
          if (child.checked) { group++ }
        }
      }
      if (child.tagName == "SELECT" && child.value.length < 1) {
        a[ii].className = a[ii].className + " qm-error";
        errors ++;
      }
      if (child.tagName == "TEXTAREA" && child.value.length < 1) {
        a[ii].className = a[ii].className + " qm-error";
        errors ++;
      }
    }
    if ((a[ii].classList.contains("qm-checkbox") || a[ii].classList.contains("qm-radio")) && group < 1) {
      a[ii].className = a[ii].className + " qm-error"; 
      errors++; 
    }
  }
  if (errors < 1) { return true }
}

function renderForm(url, form, json_product) {
  var a = document.getElementById('qm-modal');
  if (a) {
    setProduct(json_product);
    var quote = JSON.parse(sessionStorage.getItem('qm-rfq'));
    document.getElementById('qm-variant-text').value = quote.variantText;
    document.getElementById('qm-variant-id').value = quote.variantId;  
    a.style.display = 'block';
  } else {
    setProduct(json_product);
    buildForm(url, form);
  }
}

function setProduct(json_product) {
  var e = document.getElementById('product-select');
  if (e.disabled == false) {
    var i = e.options[e.selectedIndex].value;
    var t = e.options[e.selectedIndex].text;
  } else { 
    var i = '';
    var t = '';
    for (var k=0; k<json_product['options'].length; k++) {
      var l = document.getElementById('product-select-option-'+k);
      var m = l.options[l.selectedIndex].value;
      t = t + json_product['options'][k] + ': ' + m + ' / ';
    }
    t = t.substring(0, t.length - 3);
  };

  var myQuote = new Object();

  myQuote.productId = json_product['id'];
  myQuote.productTitle = json_product['title'];
  myQuote.variantId = i;
  myQuote.variantText = t;

  sessionStorage.setItem('qm-rfq', JSON.stringify(myQuote));
}

function createTextFieldType (required, reqFieldsReq, reqFieldsLbl, reqFieldsType, type, label, fieldType, id, field) {
  var w = document.createElement('div'),
      x = document.createElement('label'),
      y = type !== 'paragraph' ? document.createElement('input') : document.createElement('textarea'),
      u = document.createElement('input'),
      v = document.createElement('input'),
      qmRequire = required ? ' qm-required' : '';

  w.className = 'qm-group qm-' + type + qmRequire;
  x.innerHTML = label;
  x.htmlFor = id;
  y.type = fieldType;
  y.placeholder = field[id].placeholder;
  y.className += ' ' + (field[id].css_class);
  y.id = id;
  y.name = reqFieldsReq;
  y.required = required.toString();
  u.type = 'hidden';
  u.name = reqFieldsLbl;
  u.value = label;
  v.type = 'hidden';
  v.name = reqFieldsType;
  v.value = type;
  w.appendChild(x);
  w.appendChild(y);
  w.appendChild(u);
  w.appendChild(v);

  if (type == 'inpage') {

    var t = document.createElement('input');  

    t.type = 'hidden';
    t.value = field[id].id_class;
    t.name = 'request[fields]['+ id +'][id_class]';
    w.appendChild(t);
  }

  return w;
}

function createCheckboxOrRadio (required, reqFieldsReq, reqFieldsLbl, reqFieldsType, type, label, fieldType, options, id) {
  var w = document.createElement('div'),
      x = document.createElement('label'),
      t = document.createElement('input'),
      u = document.createElement('input'),
      isCheckbox = fieldType == 'checkbox' ? '[]' : '',
      qmRequire = required ? ' qm-required' : '';

  w.className = 'qm-group qm-' + fieldType + qmRequire;
  x.innerHTML = label;
  t.type = 'hidden';
  t.name = reqFieldsLbl;
  t.value = label;
  u.type = 'hidden';
  u.name = reqFieldsType;
  u.value = type;
  w.appendChild(x);
  w.appendChild(t);
  w.appendChild(u);
  for (var y in options) {
    var v = document.createElement('label');
    var z = document.createElement('input');
    v.innerHTML = options[y]['name'];
    v.htmlFor = id + '_' + options[y]['name'].toLowerCase().split(' ').join('_');
    z.id = id +'_' + options[y]['name'].toLowerCase().split(' ').join('_');
    z.required = required.toString();
    z.type ='checkbox';
    z.value = options[y]['name'];
    z.name =  reqFieldsReq + isCheckbox;
    w.appendChild(z);
    w.appendChild(v);
  }

  return w;
}

// Find product's option by element id, class, product's name
function grabProductOption () {

  var jsonProduct = {},
      options = [],
      variants = [],
      variantOptions,
      temp;

  // Get all options product have
  temp = document.querySelectorAll('#product-variants label');
  for (var i = 0; i < temp.length; i++) {
    options.push(temp[i].textContent);
  }

  // Get all variants
  temp = document.querySelectorAll('#product-select option');
  for (var j = 0; j < temp.length; j++) {
    variantOptions = temp[j].textContent.split('-');

    variants.push({
      id: temp[j].value,
      title: variantOptions[0],
      options: variantOptions[0].split('/'),
      price: parseFloat(variantOptions[1].replace( /^\D+/g, '')),
      available: true
    });
  }

  jsonProduct = {
    id: document.getElementById('shopify-product-reviews').getAttribute('data-id'),
    price: parseFloat(document.getElementsByClassName('product-price')[0].textContent.replace( /^\D+/g, '')),
    title: document.querySelector('#product-title h1').textContent,
    vendor: document.querySelector('#product-title h2 a').textContent,
    description: document.querySelector('#full_description').textContent,
    available: true,
    price_min: 0,
    options: options,
    variants: variants
  };

  return jsonProduct;
}

function getInpageCustomData(objSpec) {

  if (!objSpec && objSpec.length == 0) {

    return;
  }

  var result = '',
      classObj = document.getElementsByClassName(objSpec),
      idObj = document.getElementById(objSpec),
      resultObj,
      nameObj = ''; 

  // Find element have id / class is objSpec
  if (idObj) {

    resultObj = idObj;
  } else if (classObj && classObj.length > 0) {

    resultObj = classObj[0];
  }

  // If object is select DOM element, we get selected value
  if (resultObj && resultObj.nodeName == 'SELECT') { // select type

    result = resultObj.value;
  } else if (resultObj == undefined) { // variant's option name

    var body = document.body.innerHTML,
        index = body.indexOf(objSpec),
        elementName = body.substr(index + objSpec.length, 20).replace(/\s/g, '').split('><')[0].replace(/\W+/g, ""),
        el, elements;

    if (elementName.length > 0) {

      elements = document.getElementsByTagName(elementName);

      for (var i = 0; i < elements.length; i++) {

        // This element have objSpec string inside
        if (elements[i].textContent.indexOf(objSpec) >= 0) {

          el = elements[i];
        }
      }

      // Label + input field type
      if (el && (el.nextElementSibling.nodeName == 'SELECT' || el.nextElementSibling.nodeName == 'INPUT')) {

        result = el.nextElementSibling.value;
      } else if (el) { 

        result = el.nextElementSibling.textContent.trim().split('\n')[0].trim();
      } else {  // we haven't found anything

        result = ''; 
      }
    }
  } else { // other

    result = resultObj.textContent.trim().split('\n')[0].trim();
  }

  return result;
}

function buildForm(url, form) {

  var a = document.createElement('div');
  a.id = 'qm-modal';
  a.style.display = 'visible';
  a.style.position = 'fixed';
  a.style.zIndex = '10000';
  a.style.top = '0';
  a.style.left = '0';
  a.style.right = '0';
  a.style.bottom = '0';
  a.style.overflowX = 'hidden';
  a.style.overflowY = 'auto';
  a.style.background = 'rgba(0,0,0,0.7)';

  var al = document.createElement('img');
  al.id = 'qm-ajax-loader';
  al.src = '//cdn.shopify.com/s/global/lightbox/v204/loading.gif';
  al.style.position = 'fixed';
  al.style.left = '50%';
  al.style.top = '45%';

  a.appendChild(al);

  document.getElementsByTagName('body')[0].appendChild(a);

  if (form && form.id) {

    d = form;

    var b = document.createElement('div');
    b.id = 'qm-modal-inner';
    b.style.display = 'none';
    b.style.zIndex = '10001';
    b.style.margin = '30px auto';
    b.style.top = '30px';
    b.style.position = 'relative';
    b.style.background = '#fff';
    b.style.width = '600px';
    b.style.padding = '10px 20px';
    b.style.border = '5px solid #999';
    b.style.borderRadius = '10px';
    b.style.boxShadow = '0 0 10px rgba(0,0,0,0.5)';

    var c = document.createElement('form');
    c.style.padding = '10px';
    c.action = url+'/requests.json';
    c.enctype = 'application/json';
    c.id = 'qm-form';

    var l = document.createElement('input');
    l.type = 'hidden';
    l.name = 'request[form_id]';
    l.value = d['id'];
    c.appendChild(l);

    // var m = document.createElement('div');
    // var n = document.createElement('div');
    // var o = document.createElement('label');
    // var p = document.createElement('label');
    // var q = document.createElement('input');
    // var r = document.createElement('input');
    // var aa = document.createElement('input');
    // var ab = document.createElement('input');

    // var quote = JSON.parse(sessionStorage.getItem('qm-rfq'));

    // m.className = 'qm-group';
    // n.className = 'qm-group';
    // o.htmlFor = 'product';
    // o.innerHTML = 'Product';
    // p.htmlFor = 'variant';
    // p.innerHTML = 'Variants';
    // q.type = 'text';
    // q.id = 'qm-product-title'
    //   q.name = '';
    // q.readOnly = 'true';
    // q.value = quote.productTitle;
    // r.type = 'text';
    // r.id = 'qm-variant-text'
    //   r.name = '';
    // r.readOnly = 'true';
    // r.value = quote.variantText;  
    // aa.type = 'hidden';
    // aa.id = 'qm-product-id'
    //   aa.name = '';
    // aa.value = quote.productId;
    // ab.type = 'hidden';
    // ab.id = 'qm-variant-id'
    //   ab.name = '';
    // ab.value = quote.variantId;

    // m.appendChild(o);
    // m.appendChild(q);
    // m.appendChild(aa);
    // n.appendChild(p);
    // n.appendChild(r);
    // n.appendChild(ab);

    // c.appendChild(m);
    // c.appendChild(n);

    var f = document.createElement('div');
    var h = document.createElement('a'); 
    var g = document.createElement('h4');

    f.style.padding = '10px';
    f.style.borderBottom = '1px solid #e5e5e5';
    h.style.float = 'right';
    h.id = 'modal_close';
    h.href = '#';
    h.text = 'x';
    h.onclick = function() { a.style.display = 'none'; return false; }

    g.style.margin = '0';
    g.innerHTML = d['name'];
    f.appendChild(h); 
    f.appendChild(g);  
    b.appendChild(f);

    var i = d['fields'],
        w = document.createElement('div');

    for (var e in i) {
      var required = i[e]['validate']['validates_presence_of'] == '1',
        reqFieldsReq = 'request[fields]['+e+'][request]',
                     reqFieldsLbl = 'request[fields]['+e+'][label]',
                     reqFieldsType = 'request[fields]['+e+'][type]',
                     type = i[e]['type'],
                     label = i[e]['label'],
                     qmRequire = required ? ' qm-required' : '';

      switch(type) {
        case 'name':
          w = createTextFieldType (required, reqFieldsReq, reqFieldsLbl, reqFieldsType, type, label, 'text', e, i);

          c.appendChild(w);
          break;
        case 'phone':
          w = createTextFieldType (required, reqFieldsReq, reqFieldsLbl, reqFieldsType, type, label, 'tel', e, i);

          c.appendChild(w);            
          break;
        case 'email':
          w = createTextFieldType (required, reqFieldsReq, reqFieldsLbl, reqFieldsType, type, label, 'email', e, i);

          c.appendChild(w);              
          break;
        case 'text':
          w = createTextFieldType (required, reqFieldsReq, reqFieldsLbl, reqFieldsType, type, label, 'text', e, i);

          c.appendChild(w);              
          break;
        case 'file':
          w = createTextFieldType (required, reqFieldsReq, reqFieldsLbl, reqFieldsType, type, label, 'file', e, i);

          c.appendChild(w);              
          break;
        case 'paragraph':
          w = createTextFieldType (required, reqFieldsReq, reqFieldsLbl, reqFieldsType, type, label, 'textarea', e, i);

          c.appendChild(w);                 
          break;
        case 'inpage':
          w = createTextFieldType (required, reqFieldsReq, reqFieldsLbl, reqFieldsType, type, label, 'text', e, i);

          // Find data in page and insert it to inpage text input
          var childs = w.children || w.childNotes,
              idOrClass = i[e].id_class,
              j, length = childs.length;

          for (j = 0; j < length; j++) {
            var current = childs[j];

            if (current.nodeName == 'INPUT' && current.type == 'text') {

              current.value = getInpageCustomData(idOrClass);
            }
          }

          c.appendChild(w);                 
          break;
        case 'radio':
          w = createCheckboxOrRadio (required, reqFieldsReq, reqFieldsLbl, reqFieldsType, type, label, 'radio', i[e]['options'], e, i);

          c.appendChild(w);
          break;
        case 'checkbox':
          w = createCheckboxOrRadio (required, reqFieldsReq, reqFieldsLbl, reqFieldsType, type, label, 'checkbox', i[e]['options'], e, i);

          c.appendChild(w);
          break;
        case 'select':
          var u = document.createElement('div');
          var x = document.createElement('label');
          var s = document.createElement('input');
          var t = document.createElement('input');
          var w = document.createElement('select');
          var v = document.createElement('option');
          u.className = 'qm-group qm-select' + qmRequire;
          x.innerHTML = label;
          s.type = 'hidden';
          s.name = reqFieldsLbl;
          s.value = label;
          t.type = 'hidden';
          t.name = reqFieldsType;
          t.value = type;
          w.name = reqFieldsReq;
          w.required = required.toString();
          v.text = 'Select Option';
          v.value = '';
          u.appendChild(x);
          u.appendChild(s);
          u.appendChild(t);
          u.appendChild(w);
          w.add(v);
          for (var y in i[e]['options']) {
            var z = document.createElement('option');
            z.value = i[e]['options'][y]['name'];
            z.text = i[e]['options'][y]['name'];
            w.add(z);
          }
          c.appendChild(u);
          break;
      }
    }

    var j = document.createElement('div');
    var k = document.createElement('button');
    j.className = 'qm-actions';
    k.type = 'submit';
    k.id = 'qm-submit';
    k.innerText = 'Submit';
    k.onclick = function() { postForm(c);  return false; }

    j.appendChild(k);
    c.appendChild(j);
    b.appendChild(c);
    a.appendChild(b);
    showModal();
  } else {
    a.removeChild(al);
    var b = document.createElement('div');
    b.id = 'qm-modal-inner';
    b.style.zIndex = '10001';
    b.style.margin = '30px auto';
    b.style.top = '30px';
    b.style.position = 'relative';
    b.style.background = '#fff';
    b.style.width = '600px';
    b.style.padding = '10px 20px';
    b.style.border = '5px solid #999';
    b.style.borderRadius = '10px';
    b.style.boxShadow = '0 0 10px rgba(0,0,0,0.5)';
    b.innerHTML = '<h2>Uh Oh. There seems to be a problem!</h2><p></p>';
    a.appendChild(b); 
    setTimeout(function(){
      a.remove();
    },2000)
  }
}

function showModal() {
  document.getElementById('qm-ajax-loader').remove();
  var a = document.getElementById('qm-modal');
  var b = a.childNodes[0];
  if (b.style.display == 'none') {
    b.style.display = 'block';
  }
}

/////////////////////// User custom javascript //////////////////////////////
<%= form.scripts.html_safe %>
/////////////////////////////////////////////////////////////////////////////

/////////////////////// User custom styles  /////////////////////////////////
var column_style = '<%= form.column_style == 1 ? " .qm-group { width: 98%; }" : " .qm-group { width: 48%; }" %>',
    css = '<%= form.styles.gsub(/\s+/, " ").html_safe %>' + column_style,
    head = document.head || document.getElementsByTagName('head')[0],
    style = document.createElement('style');

style.type = 'text/css';
if (style.styleSheet){
  style.styleSheet.cssText = css;
} else {
  style.appendChild(document.createTextNode(css));
}

head.appendChild(style);
/////////////////////////////////////////////////////////////////////////////


// Form use for render
var form = <%= form.to_json.html_safe %>;

// Get product data
var json_product = grabProductOption(); 

// Replace add to cart text and if
document.getElementById('product-add-wrap').innerHTML='<div id="product-add-medallion" class=""></div><input type="submit" name="quote" id="quote" value="Quote" class="smooth">';  

// Render form on click new button
document.getElementById('quote').onclick = function() { renderForm('<%= request.protocol + request.host_with_port %>', form, json_product); return false; } 
